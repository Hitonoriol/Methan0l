/* Basic Methan0l syntax demonstration */

/* Output operator */
%% "Hello, Methan0l!" :: newl	/* "newl" is a reserved identifier for the new line character */

/* `<%` prints with a trailing newline */
<% "Foo! Bar?"

/* Variable assignment */
foo = 123			/* Integer (signed 64-bit) */
bar = 456.5			/* Float (64-bit) */
baz = true			/* Boolean */
str = "Hello, Methan0l!"	/* String (class type) */

<% "Arithmetic operators"
calc = ((foo + bar) * (foo / 25.375)) / 10
<% "Calculation result: " :: calc

/* String concatenation with automatic type conversion */
<% "String concatenation: \"" :: str :: " " :: foo :: " " :: bar :: " " :: baz :: "\""

<% "Comparison operators"
<% "Equivalent strings: " :: ("equality test" == "equality test")
a = 42; b = 42 /* Semicolons can be omitted, but must be used to write more than 1 expression on one line */
<% a :: " == " :: b :: " : " :: (a == b)
a /= 50.0
<% a :: " < " :: b :: " : " :: (a < b)
c = -100
<% c :: " <= " :: a :: " <= " :: b :: " : " :: ((c <= a) & (a <= b))
<% "!false = " :: !false :: newl

<% "Input operator with type deduction"
%% "Enter something: "
%> test
<% "Your input: \"" :: test :: "\" is of type: " :: typename: test

/* Return operator: `return: expr`. Any Unit can return a value. 
 * Main Unit must return a numeric value if launched via the CLI. */
return: foo