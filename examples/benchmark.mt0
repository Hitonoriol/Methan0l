<% "Methan0l benchmarks" :: newl

start = now()
time = 0
set_max_mem(0x8000000)

<% "Unit execution overhead: " ::
	{
		rep = 1_000_000
		msec = 0.0
		for (i, range(rep)) msec += measure_time({})
		#time += msec
		return: msec / rep
	}()
:: "ms"

execution_time = func: action, times {
	tlist = []
	for (i, range(times))
		tlist[] = measure_time(action())
	mean = 0.0
	for (n, tlist) {mean += n}
	#time += mean
	return: mean / tlist.size()
}

benchmark = func: bench_name, action, times => 10 {
	mem = mem_in_use()
	<% "\n* " :: bench_name :: ":"
	%% '\t' :: ">> "; mem_info()
	time = execution_time(action, times)
	<% '\t' :: "Mean of " :: times :: " measurements: " :: time :: "ms"

	delete: bench_name; delete: action; delete: times; delete: time
	if: ((leaked = mem_in_use() - mem) > 0) {
		<% '\t' :: "[!] Leaked " :: leaked :: "b of memory"
	}
}

class: Test {
	n
	foo => method: n {
		this.n = n
	}
}

obj = new: Test()

rec = func: n {
	if: (n < 1) break!
	rec(n - 1)
}

benchmark("Recursion, 1000 calls deep", {
	rec(1000)
})

/* This was written when ranges evaluated to Lists */
benchmark("range(1 000 000)", {
	range(1_000_000)
})

benchmark("For loop, 1m iters", {
	for (i = 0, i < 1_000_000, ++i) {}
})

benchmark("While loop, 1m iters", {
	i = 0
	while (i < 1_000_000) { ++i }
})

benchmark("For-each loop, 1m iters", {
	for (i, range(1_000_000)) {}
})

benchmark("Functional for-each, 1m iters", {
	range(1_000_000).for_each(f: (){})
})

benchmark("List mapping, 1m elements", {
	range(1_000_000).map(f: n -> n + 1)
})

benchmark("Pseudo-method call", {
	123.sqrt()
}, 1_000_000)
	
benchmark("Class method call", {
	#obj.foo(42)
}, 1_000_000)

time_total = (now() - start) / 1000.0
<% newl :: "All benchmarks finished. [" :: time :: " ms spent on tests / " :: time_total :: " secs spent in total]"