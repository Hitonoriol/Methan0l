"Conditional operators" :: newl

/* Ternary operator */
a = 10; b = a * 100
foo = (b > a ? "b" : "a")
%%("Ternary result: " :: foo :: newl)

/* Can also be used as if-else operator using execution syntax combined with Unit definitions inside then and else arms */
a == nil ? {
	"[then] unit has been executed" :: newl
} : {
	"[else] unit has been executed" :: newl
}

/* You can also use semantic "if" & "else" tokens inside the ternary opr body: */
/* if-elseif using ternary operators */
x = -100
if (x > 0) ? {
	"This unit won't be executed"
} else: if ((b % 3) >= 1) ? {
		"Else-if branch: b mod 3 is >= 1!"
}

/* If you want to be able to return from within the conditional opr,
 * you have to use the Weak Unit syntax: */
if (a != "foo") ? -> {
 	false! /* Will stop this Unit's execution & will return this value from the parent Unit */
 	"This won't be executed"
 }