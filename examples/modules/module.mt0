/* Load this file using "load" function;
 * 	you can also wrap it in make_box() function to load as a Box Unit to be able to call funcs from it:
 *
 * module = load("./examples/module.mt0").make_box()
 * module.test
 *
 * Or, if you want to import all the idfrs into current scope, use import$ function:
 *
 * load("./examples/module.mt0").import()
 * test
 *
 */

field = "Some text"

/* Recursive loop shortcut, pass <action> and <times> in init block */
repeat = {
	action
	if: (--times <= 0) {nil!}
	#repeat({action = #action; times = #times})
}

/* Loop-less foreach for lists. Pass <list> and <action> in init block */
for_each = {
	/* Isolate the recursive scope inside another "virtual" scope
	 *	to avoid copying <list>, <i> and <end> into each recursive call */
	{
		repeater = {
			#action({element = #list[#i]})
			if: (++#i >= #end) {nil!}
			#repeater
		}
		
		repeater
	} ({i = 0; end = size(#list)})
}

mean = func: num_list {
	sum = 0.0
	for (n, num_list) {
		sum += n
	}
	sum / num_list.size()!
}

/* Weak Unit syntax is used to omit the # prefix before module-local variable names */
test = -> {
	<% "Module test"

	for_each({
		list = [13, 24, 35, 46, 57, 68, 79, 80]
		<% "Initial list: " :: list
		action = {%% element * 1.5 :: " "}
	})
	newl
	
	<% "Test mean of list: " :: mean([34, 12, 0.5, 2, 45, -1, 7, 11.11])
}

if: (is_main_unit()) {
	<% "Module launched as main Unit. Running test()..."
	test()
}