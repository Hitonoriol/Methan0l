<% "Classes" :: newl

class: Point {
	/* Define class fields */
	x, y
	
	/* Constructor, called automatically on `new: Point(...)` invocation */
	construct => method: x => 0, y => 0
		this.set(x, y)

	set => method: x, y {
		this.x = x
		this.y = y
		return: this
	}

	get_x => method: ()		this.x!
 
	get_y => method: ()		this.y!

	add => method: rhs {
		this.x += rhs.x
		this.y += rhs.y
		return: this
	}
	
	sub => method: rhs {
		this.x -= rhs.x
		this.y -= rhs.y
		return: this
	}
	
	mul => method: rhs {
		this.x *= rhs.x
		this.y *= rhs.y
		return: this
	}
	
	div => method: rhs {
		this.x /= rhs.x
		this.y /= rhs.y
		return: this
	}
	
	/* Operator overloads */
	`+` => method: rhs -> (objcopy: this).add(rhs)
	`-` => method: rhs -> (objcopy: this).sub(rhs)
	`*` => method: rhs -> (objcopy: this).mul(rhs)
	`/` => method: rhs -> (objcopy: this).div(rhs)
	`+=` => method: rhs -> this.add(rhs)
	`-=` => method: rhs -> this.sub(rhs)
	`*=` => method: rhs -> this.mul(rhs)
	`/=` => method: rhs -> this.div(rhs)

	/* Called automatically when using String-converting operators */
	to_string => method: () -> "(" :: this.x :: ", " :: this.y :: ")"

	static_method => fun: x
		<% $"Static method arg: \"{}\"" x
}

/* Create some test objects */
foo = new: Point(1, 2)
bar = new: Point(0.5, 0.25)
empty = new: Point()

/* Sum as a new object via `objcopy` operator */
foo_plus_bar = (objcopy: foo).add(bar)

/* Using overloaded operators */
sum = foo + bar
diff = foo - bar

<% "* Point foo: " :: foo
<% "* Point bar: " :: bar
<% "* Empty point: " :: empty
<% "* foo + bar: " :: foo_plus_bar
<% $"* Overloaded operators: foo + bar = {}; foo - bar = {}" sum, diff
<% $"* Overloaded compound assignment: foo *= bar = {}", foo *= bar
<% ""

<% "Calling a static method of class Point:"
Point@static_method("Test")
<% ""

<% "class_id() test:"
/* Type checking via class_id() method -- can be called both from an object & statically */
id = foo.class_id()
<% "* Is foo an instance of Point: " :: id == Point@class_id()<% "* Is foo an instance of File: " :: id == File@class_id()/* This can also be done using the `is` operator */<% $"foo is: Point -> {}" (foo is: Point)<% $"foo is: Int -> {}" (foo is: Int)<% ""<% "Reflection:"<% "* All methods of `Point`: " :: Point@get_methods()<% "* All fields of `foo`: " :: foo.get_fields()/* Modify object field values by name */foo.get_field("x") = 1337foo.get_field("y") = 7331<% "* foo.get_x() called by name: " :: Point@get_method("get_x")(foo)<% "* foo.y accessed by name: " :: foo.get_field("y")<% ""<% "Inbuilt class `File` test:"workdir = new: File(".")<% "Absolute name of the current working directory: " :: workdir.absolute_path()dirs = total = 0
workdir.for_each(f: file {
	++total
	if: (File@is_dir(file)) {++dirs}
})
<% $"Working directory contains {} files in total, {} of them are directories." total, dirs