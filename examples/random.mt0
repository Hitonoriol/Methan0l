/* Print the result of f$() 100 times */
repeat = func @(f) {
	range(100).for_each(func @(i) {
		%% f() :: " "
		if ((i + 1) % 10 == 0) ? -> {%% newl}
	})
	%% newl
}

"Random number generator" :: newl
rnd = Random.new$()

"Random 64-bit Integer [-100; 100]"
/* num = rnd.next_int$(min, max)
 * num = rnd.next_int$(max) 	<-- Int in range [0; max]
 * num = rnd.next_int$()	<-- Int in range [INT64_MIN; INT64_MAX]
 */
repeat$(func@() { (#rnd.next_int$(-100, 100))! })

"Random Double [0; 10]"
/* num = rnd.next_double$(min, max)
 * num = rnd.next_double$(max)	<-- Double in range [0; max]
 * num = rnd.next_double$()	<-- Double in range [0; 1]
 */
repeat$(func@() { (#rnd.next_double$(10))! })

"Random Boolean [25%]"
/* bool = rnd.next_boolean$(probability) <-- returns true with specified probability in range [0; 1]
 * bool = rnd.next_boolean$()		 <-- returns true with 50% probability
 */
repeat$(func@() { (#rnd.next_boolean$(0.25) ? 1 : 0)! })

"Seeded RNG"
/* Seed can be specified as a ctor arg */
rnd_b = Random.new$(12345)
"[after init] " :: rnd_b.next_int$()

/* RNG can also be re-seeded on the fly: */
rnd_b.reseed$(12345)
"[re-seed w/ same value] " :: rnd_b.next_int$()