<% "Classes" :: newl
class: Point @(
	private => $(x, y),
	
	/* Called automatically on Point.new$(...) invocation. */
	construct => func @(x => 0, y => 0) {
		this.set$(x, y)
	},
	
	set => func @(x, y) {
		this.x = x
		this.y = y
		return: this
	},

	get_x => func @() {	this.x! },
	get_y => func @() {	this.y! },
	
	add => func @(rhs) {
		this.x += rhs.x
		this.y += rhs.y
		return: this
	},
	
	/* Called automatically when using String-converting operators */
	to_string => func @() {
		"(" :: this.x :: ", " :: this.y :: ")"!
	},
	
	static_method => func @(x) {
		<% "Static method arg: " :: x
	}
)

foo = Point.new(1, 2)
bar = Point.new(0.5, 0.25)
empty = Point.new()
foo_plus_bar = (objcopy: foo).add(bar)

<% "* Point foo: " :: foo
<% "* Point bar: " :: bar
<% "* foo + bar: " :: foo_plus_bar
<% "* Empty point: " :: empty

id = foo.class_id()
<% "? Is foo an instance of Point: " :: id == Point@class_id()
<% "? Is foo an instance of File: " :: id == File@class_id()

Point@static_method(123)