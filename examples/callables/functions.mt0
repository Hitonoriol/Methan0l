<% "Functions" :: newl

delim = "-".repeat(50)
title = func: text
	<% $"\n{1}\n{2}\n{1}" #delim, text

title("Basic function definition syntax & return operators")
/* Postfix return operator:
 * 	expr! */
sum = func: a, b, c => 123 { /* `c` has a default value */
	if (c != 123) ?
		<% "A non-default third arg has been provided!"!

	a + b!
}

/* Prefix return operator:
 * 	return: expr */
f = func: x
	return: x >> 1

<% sum(5, 7) == 12
<% sum(1337.7331, 7331.1337) == 8668.8668
<% sum(999, 999, "foo") is: String
<% f(123) == 61

title("Lambdas / alternative function definition forms")

/* Unparenthesized form */
foo = func: x, y {
	return: x * y
}
/* ^^^ Here in place of `func` the token `method` can be used when defining a class method. */
<% foo(9, 10) == 90
 
 /* To define a no-arg function using unparenthesized form,
  * 	a `()` must be used in place of argument list: */
noarg = func: () {
	<% "I accept no arguments"
}
<% noarg() == nil
 
 /* Lambda notation (RHS of the `->` is wrapped in return expression automatically) */
bar = f: x -> x.pow(2)
<% bar(9) == 81
 
 /* Multi-expression lambda notation (no return expression is generated automatically) */
baz = f: () -> a = 123, b = 456, out = a * b, out!
<% baz() == 56088
 
 /* More examples */
sum_up_to = f: x -> sum = 0, (1..x)[do: f: n, %sum -> sum += n], sum!
<% sum_up_to(10) == 55