"Maps" :: newl

/* Keys in map definition can be specified either with or without quotes:
 * 	unquoted keys won't be evaluated as identifiers.
 * If you want to use spaces/special characters in a key, you must declare it as a string literal.
 */
map = @(key1 => 123,
	"string key" => 0.5,
	1337 => "numeric key",
	some_list => $(1, 3, 5, 7),
	"another map" => @(foo => "bar"),
	bar => "baz",
	blah => false)

"Map: " :: map :: newl

"Accessing an element: " :: map["key1"]

"Deleting an element..."
map[~1337]
"After deletion: " :: map

"Nested element access: "
	:: map["some_list"][2] :: " | "
	:: map["another map"]["foo"]
newl

"Iterate over a map"
do $(key, map.list_of$(keys)) -> {
	"Key: " :: key :: ", Value: " :: map[key]
}
""
/* Extract key / value lists from maps: Map.list_of$(keys) & Map.list_of$(values) */

"Map Functional for_each"
map.for_each$(func @(key, val) { <% "{" :: key :: ": " :: val :: "} " })

"No comma map definition"
map = @(
	a => 1
	b => 3
	c => 5
)
<% map