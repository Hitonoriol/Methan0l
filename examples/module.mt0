/* Load this file using "load" function;
 * 	you can also wrap it in persistent() operator to load as a Box Unit to be able to call funcs from it:
 *
 * module = persistent(load$("./examples/module.mt0"))
 * module.test
 *
 */

field = "Some text"

/* Recursive loop shortcut, pass <action> and <times> in init block */
repeat = {
	action
	(--times) <= 0 ? -> {nil!}
	#repeat$({action = #action; times = #times})
}

/* Loop-less foreach for lists. Pass <list> and <action> in init block */
for_each = {
	/* Isolate the recursive scope inside another "virtual" scope to avoid copying <list>, <i> and <end> */
	{
		repeater = {
			#action$({element = #list[#i]})
			(++#i) >= #end ? -> {nil!}
			#repeater
		}
		
		repeater
	} $({i = 0; end = size$(#list)})
}

mean = func @(num_list) {
	sum = 0.0
	do $(n, num_list) -> {
		sum += n
	}
	(sum / size$(num_list))!
}

/* Weak Unit syntax is used to omit the # prefix before module-local idfrs */
test = -> {
	"Module test"

	for_each$({
		list = $(13, 24, 35, 46, 57, 68, 79, 80)
		action = {%%((element * 1.5) :: " ")}
	})
	newl
	
	"Test mean of list: " :: mean$($(34, 12, 0.5, 2, 45, -1, 7, 11.11))
}