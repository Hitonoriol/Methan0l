/* Print the result of f() 100 times */
repeat = func: f {
	range(100).for_each(f: i {
		%% f() :: " "
		if ((i + 1) % 10 == 0) ? {%% newl}
	})
	%% newl
}

<% "Random number generator" :: newl
rnd = new: Random()

<% "Random 64-bit Integer [-100; 100]"
/* num = rnd.next_int(min, max)
 * num = rnd.next_int(max) 	<-- Int in range [0; max]
 * num = rnd.next_int()	<-- Int in range [INT64_MIN; INT64_MAX]
 */
repeat(f: () -> rnd.next_int(-100, 100))

<% "Random Double [0; 10]"
/* num = rnd.next_double(min, max)
 * num = rnd.next_double(max)	<-- Double in range [0; max]
 * num = rnd.next_double()	<-- Double in range [0; 1]
 */
repeat(f: () -> rnd.next_double(10))

<% "Random Boolean [25%]"
/* bool = rnd.next_boolean(probability) <-- returns true with specified probability in range [0; 1]
 * bool = rnd.next_boolean()		 <-- returns true with 50% probability
 */
repeat(f: () -> rnd.next_boolean(0.25) ? 1 : 0)

<% "Seeded RNG"
/* Seed can be specified as a ctor arg */
rnd_b = new: Random(12345)
<% "First numer after seeding via constructor: " :: rnd_b.next_int()

/* RNG can also be re-seeded after construction: */
rnd_b.reseed(12345)
<% "First number after re-seeding with the same seed: " :: rnd_b.next_int()